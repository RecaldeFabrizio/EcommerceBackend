paths: 
  /api/user/:
    get:
      summary: Obtiene todos los usuarios
      tags: 
        - Users
      responses:
        "200":
          description: Los usuarios fueron obtenidos correctamente
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#components/schemas/User'
        "500":
          description: Error interno del server, usualmente generado por una query defectuosa
    post:
      summary: Crea un nuevo usuario.
      tags: 
        - Users
      requestBody:
        required: true
        content: 
          application/json:
            schema: 
              $ref: '#components/requestBodies/updateUser'
      responses:
        "201":
          description: El usuario fue creado correctamente
  /api/user/{uid}:
    get:
      summary: Obtiene un usuario por su uid
      tags: 
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: El id del usuario a solicitar.
        schema:
          type: String  
      responses:
        "200":
          description: El usuario fue obtenido correctamente
          content:
            application/json:
              schema: 
                $ref: '#components/schemas/User'
    put:
      summary: Se actualiza un usuario en base un uid
      tags:
        - Users
      parameters:
      - name: uid
        in: path
        required: true
        description: El user id del usuario a actualizar
        schema: 
          type: string
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#components/requestBodies/updateUser'  
    delete:
      summary: Elimina un usuario por su uid
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          type: string
          description: Id del usuario a eliminar
      responses:
        "200":
          description: Usuario eliminado correctamente
        "404":
          description: Usuario no encontrado

components:
  schemas: 
    User: 
      type: object
      properties: 
        _id:
          type: string
          description: Id autogenerado por Mongo.
        first_name:
          type: string
          description: El primer nombre del usuario.
        last_name:
          type: string
          description: El segundo nombre del usuario.
        email:
          type: string
          description: El email del usuario.
        password:
          type: string
          description: El contraseña del usuario.
      example:
        _id: ObjectId('mdalksmckalsmckmaskcmamskcm')
        first_name: Fabrizio
        last_name: Recalde
        email: fabrizio@gmail.com  
        password: 321123
  requestBodies: 
    updateUser:
      type: object
      properties: 
        first_name:
          type: string
          description: El primer nombre del usuario.
        last_name:
          type: string
          description: El segundo nombre del usuario.
        email:
          type: string
          description: El email del usuario.
        password:
          type: string
          description: El contraseña del usuario.
      example:
        first_name: Fabrizio
        last_name: Recalde
        email: fabrizio@gmail.com  
        password: '123321'

